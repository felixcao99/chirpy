// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refreshtoken.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getFreshTokenByToken = `-- name: GetFreshTokenByToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refreshtokens WHERE token = $1
`

func (q *Queries) GetFreshTokenByToken(ctx context.Context, token string) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, getFreshTokenByToken, token)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const insertFreshToken = `-- name: InsertFreshToken :one
INSERT INTO refreshtokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    NOW() + INTERVAL '60 days',
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type InsertFreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) InsertFreshToken(ctx context.Context, arg InsertFreshTokenParams) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, insertFreshToken, arg.Token, arg.UserID)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const resetRefreshTokens = `-- name: ResetRefreshTokens :exec
DELETE FROM refreshtokens
`

func (q *Queries) ResetRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetRefreshTokens)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refreshtokens
SET revoked_at = NOW(),
    updated_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
